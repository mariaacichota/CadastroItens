unit Order.ViewModel;

interface

uses
  Order.Model, System.Classes, System.SysUtils, Data.DB, FireDAC.Comp.Client;

type
  TOrderViewModel = class
  private
    FOrder: TOrder;
    FOrderModel: TOrderModel;
    FDataSource: TDataSource;
    FConnection: TFDConnection;
  public
    constructor Create(AConnection: TFDConnection);
    destructor Destroy; override;

    procedure NewOrder;
    procedure LoadOrder(OrderId: Integer; AConnection: TFDConnection);
    procedure SaveOrder(ClientId: Integer; ClientName: string; OrderDate: TDate; AConnection: TFDConnection);
    procedure DeleteOrder(OrderId: Integer; AConnection: TFDConnection);

    procedure AddOrderItem(ProductId, Quantity: Integer; UnitPrice: Double);
    procedure RemoveOrderItem(ItemId: Integer; AConnection: TFDConnection);

    function GetDataSource: TDataSource;
    function GetOrderItemsDataSource: TDataSource;
  end;

implementation

constructor TOrderViewModel.Create(AConnection: TFDConnection);
begin
  FOrderModel := TOrderModel.Create(AConnection);
  FDataSource := TDataSource.Create(nil);
  FConnection := AConnection;
  FDataSource.DataSet := FOrderModel.GetOrderItemsQuery;
end;

destructor TOrderViewModel.Destroy;
begin
  FOrderModel.Free;
  FDataSource.Free;
  inherited;
end;

procedure TOrderViewModel.NewOrder;
begin
  FOrder := TOrder.Create;
end;

procedure TOrderViewModel.LoadOrder(OrderId: Integer; AConnection: TFDConnection);
begin
  FOrder := FOrderModel.LoadOrder(OrderId, AConnection);
  FDataSource.DataSet := FOrderModel.GetOrderItemsQuery;
end;

procedure TOrderViewModel.SaveOrder(ClientId: Integer; ClientName: string; OrderDate: TDate; AConnection: TFDConnection);
begin
  if Assigned(FOrder) then
  begin
    FOrder.ClientID := ClientId;
    FOrder.ClientName := ClientName;
    FOrder.OrderDate := OrderDate;
    FOrderModel.SaveOrder(FOrder, AConnection);
  end;
end;

procedure TOrderViewModel.DeleteOrder(OrderId: Integer; AConnection: TFDConnection);
begin
  FOrderModel.DeleteOrder(OrderId, AConnection);
end;

procedure TOrderViewModel.AddOrderItem(ProductId, Quantity: Integer; UnitPrice: Double);
begin
  if Assigned(FOrder) then
    FOrderModel.AddOrderItem(FOrder.OrderID, ProductId, Quantity, UnitPrice);
end;

procedure TOrderViewModel.RemoveOrderItem(ItemId: Integer; AConnection: TFDConnection);
begin
  FOrderModel.RemoveOrderItem(ItemId, AConnection);
end;

function TOrderViewModel.GetDataSource: TDataSource;
begin
  Result := FDataSource;
end;

function TOrderViewModel.GetOrderItemsDataSource: TDataSource;
begin
  Result := FDataSource;
end;

end.

